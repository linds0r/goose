import { useEffect, useState, useCallback, useRef } from 'react';
import { ScrollArea } from '../../ui/scroll-area';
import BackButton from '../../ui/BackButton';
import ProviderGrid from './ProviderGrid';
import { useConfig } from '../../ConfigContext';
import { ProviderDetails } from '../../../api/types.gen';
import { initializeSystem } from '../../../utils/providerUtils';
import WelcomeGooseLogo from '../../WelcomeGooseLogo';
import { toastService } from '../../../toasts';

interface ProviderSettingsProps {
  onClose: () => void;
  isOnboarding: boolean;
}

export default function ProviderSettings({ onClose, isOnboarding }: ProviderSettingsProps) {
  const { getProviders, upsert, getExtensions, addExtension } = useConfig();
  const [loading, setLoading] = useState(true);
  const [providers, setProviders] = useState<ProviderDetails[]>([]);
  const initialLoadDone = useRef(false);

  // Create a function to load providers that can be called multiple times
  const loadProviders = useCallback(async () => {
    setLoading(true);
    try {
      // Only force refresh when explicitly requested, not on initial load
      const result = await getProviders(!initialLoadDone.current);
      if (result) {
        setProviders(result);
        initialLoadDone.current = true;
      }
    } catch (error) {
      console.error('Failed to load providers:', error);
    } finally {
      setLoading(false);
    }
  }, [getProviders]);

  // Load providers only once when component mounts
  useEffect(() => {
    loadProviders();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []); // Intentionally not including loadProviders in deps to prevent reloading

  // This function will be passed to ProviderGrid for manual refreshes after config changes
  const refreshProviders = useCallback(() => {
    if (initialLoadDone.current) {
      getProviders(true).then((result) => {
        if (result) setProviders(result);
      });
    }
  }, [getProviders]);

  // Handler for when a provider is launched if this component is used as part of onboarding page
  const handleProviderLaunch = useCallback(
    async (provider: ProviderDetails) => {
      const provider_name = provider.name;
      const model = provider.metadata.default_model;

      try {
        // update the config
        // set GOOSE_PROVIDER in the config file
        upsert('GOOSE_PROVIDER', provider_name, false).then((_) =>
          console.log('Setting GOOSE_PROVIDER to', provider_name)
        );
        // set GOOSE_MODEL in the config file
        upsert('GOOSE_MODEL', model, false).then((_) =>
          console.log('Setting GOOSE_MODEL to', model)
        );

        // initialize agent
        await initializeSystem(provider.name, model, {
          getExtensions,
          addExtension,
        });

        toastService.configure({ silent: false });
        toastService.success({
          title: 'Success!',
          msg: `Started goose with ${model} by ${provider.metadata.display_name}. You can change the model via the lower right corner.`,
        });

        onClose();
      } catch (error) {
        console.error(`Failed to initialize with provider ${provider_name}:`, error);

        // Show error toast
        toastService.configure({ silent: false });
        toastService.error({
          title: 'Initialization Failed',
          msg: `Failed to initialize with ${provider.metadata.display_name}: ${error instanceof Error ? error.message : String(error)}`,
          traceback: error instanceof Error ? error.stack || '' : '',
        });
      }
    },
    [onClose, upsert, getExtensions, addExtension]
  );

  return (
    <div className="h-screen w-full flex flex-col">
      <ScrollArea className="flex-1 w-full">
        {isOnboarding && (
          <div className="w-full max-w-6xl mx-auto mt-16">
            <div className="group/logo flex justify-left px-4 sm:px-6 md:px-8">
              <WelcomeGooseLogo className="h-16 w-16 md:h-20 md:w-20 text-black dark:text-white" />
            </div>
          </div>
        )}
        <div className="w-full max-w-6xl mx-auto px-4 sm:px-6 md:px-8 pt-6 pb-4">
          {/* Only show back button if not in onboarding mode */}
          {!isOnboarding && <BackButton className={'mt-[42px]'} onClick={onClose} />}
          <h1
            className="text-2xl sm:text-3xl font-medium text-textStandard mt-4"
            data-testid="provider-selection-heading"
          >
            {isOnboarding ? 'Configure your providers' : 'Provider Configuration Settings'}
          </h1>
          {isOnboarding && (
            <p className="text-sm sm:text-base text-textSubtle max-w-full sm:max-w-2xl pt-2">
              Select an AI model provider to get started with goose. You'll need to use API keys
              generated by each provider which will be encrypted and stored locally. You can change
              your provider at any time in settings.
            </p>
          )}
        </div>

        <div className="py-8 pt-[20px]">
          {/* Content Area */}
          <div className="w-full max-w-6xl mx-auto pt-4 px-4 sm:px-6 md:px-8">
            <div className="relative z-10">
              {loading ? (
                <div>Loading providers...</div>
              ) : (
                <ProviderGrid
                  providers={providers}
                  isOnboarding={isOnboarding}
                  onProviderLaunch={handleProviderLaunch}
                  refreshProviders={refreshProviders}
                />
              )}
            </div>
          </div>
        </div>
      </ScrollArea>
    </div>
  );
}
